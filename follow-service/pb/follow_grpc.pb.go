// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/follow.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FollowService_FollowUser_FullMethodName         = "/follow.FollowService/FollowUser"
	FollowService_UnfollowUser_FullMethodName       = "/follow.FollowService/UnfollowUser"
	FollowService_GetFollowers_FullMethodName       = "/follow.FollowService/GetFollowers"
	FollowService_GetFollowing_FullMethodName       = "/follow.FollowService/GetFollowing"
	FollowService_IsFollowing_FullMethodName        = "/follow.FollowService/IsFollowing"
	FollowService_GetFollowStatus_FullMethodName    = "/follow.FollowService/GetFollowStatus"
	FollowService_GetFollowersCounts_FullMethodName = "/follow.FollowService/GetFollowersCounts"
)

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*Response, error)
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*Response, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*FollowConnection, error)
	GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*FollowConnection, error)
	IsFollowing(ctx context.Context, in *IsFollowingRequest, opts ...grpc.CallOption) (*IsFollowingResponse, error)
	GetFollowStatus(ctx context.Context, in *GetFollowStatusRequest, opts ...grpc.CallOption) (*GetFollowStatusResponse, error)
	GetFollowersCounts(ctx context.Context, in *GetFollowersCountsRequest, opts ...grpc.CallOption) (*GetFollowersCountsResponse, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, FollowService_FollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, FollowService_UnfollowUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*FollowConnection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowConnection)
	err := c.cc.Invoke(ctx, FollowService_GetFollowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowing(ctx context.Context, in *GetFollowingRequest, opts ...grpc.CallOption) (*FollowConnection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowConnection)
	err := c.cc.Invoke(ctx, FollowService_GetFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) IsFollowing(ctx context.Context, in *IsFollowingRequest, opts ...grpc.CallOption) (*IsFollowingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsFollowingResponse)
	err := c.cc.Invoke(ctx, FollowService_IsFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowStatus(ctx context.Context, in *GetFollowStatusRequest, opts ...grpc.CallOption) (*GetFollowStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowStatusResponse)
	err := c.cc.Invoke(ctx, FollowService_GetFollowStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowersCounts(ctx context.Context, in *GetFollowersCountsRequest, opts ...grpc.CallOption) (*GetFollowersCountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowersCountsResponse)
	err := c.cc.Invoke(ctx, FollowService_GetFollowersCounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility.
type FollowServiceServer interface {
	FollowUser(context.Context, *FollowUserRequest) (*Response, error)
	UnfollowUser(context.Context, *UnfollowUserRequest) (*Response, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*FollowConnection, error)
	GetFollowing(context.Context, *GetFollowingRequest) (*FollowConnection, error)
	IsFollowing(context.Context, *IsFollowingRequest) (*IsFollowingResponse, error)
	GetFollowStatus(context.Context, *GetFollowStatusRequest) (*GetFollowStatusResponse, error)
	GetFollowersCounts(context.Context, *GetFollowersCountsRequest) (*GetFollowersCountsResponse, error)
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFollowServiceServer struct{}

func (UnimplementedFollowServiceServer) FollowUser(context.Context, *FollowUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedFollowServiceServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedFollowServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*FollowConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedFollowServiceServer) GetFollowing(context.Context, *GetFollowingRequest) (*FollowConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedFollowServiceServer) IsFollowing(context.Context, *IsFollowingRequest) (*IsFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollowing not implemented")
}
func (UnimplementedFollowServiceServer) GetFollowStatus(context.Context, *GetFollowStatusRequest) (*GetFollowStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowStatus not implemented")
}
func (UnimplementedFollowServiceServer) GetFollowersCounts(context.Context, *GetFollowersCountsRequest) (*GetFollowersCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersCounts not implemented")
}
func (UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}
func (UnimplementedFollowServiceServer) testEmbeddedByValue()                       {}

// UnsafeFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServiceServer will
// result in compilation errors.
type UnsafeFollowServiceServer interface {
	mustEmbedUnimplementedFollowServiceServer()
}

func RegisterFollowServiceServer(s grpc.ServiceRegistrar, srv FollowServiceServer) {
	// If the following call pancis, it indicates UnimplementedFollowServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FollowService_ServiceDesc, srv)
}

func _FollowService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_FollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_UnfollowUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowing(ctx, req.(*GetFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_IsFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).IsFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_IsFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).IsFollowing(ctx, req.(*IsFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetFollowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowStatus(ctx, req.(*GetFollowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowersCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowersCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetFollowersCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowersCounts(ctx, req.(*GetFollowersCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowService_ServiceDesc is the grpc.ServiceDesc for FollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follow.FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowUser",
			Handler:    _FollowService_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _FollowService_UnfollowUser_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _FollowService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _FollowService_GetFollowing_Handler,
		},
		{
			MethodName: "IsFollowing",
			Handler:    _FollowService_IsFollowing_Handler,
		},
		{
			MethodName: "GetFollowStatus",
			Handler:    _FollowService_GetFollowStatus_Handler,
		},
		{
			MethodName: "GetFollowersCounts",
			Handler:    _FollowService_GetFollowersCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/follow.proto",
}
