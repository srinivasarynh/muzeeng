package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"api-gateway/graph/model"
	"context"

	"github.com/google/uuid"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthResponse, error) {
	return r.register(ctx, input)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthResponse, error) {
	return r.login(ctx, input)
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, refreshToken string) (*model.AuthResponse, error) {
	return r.refreshToken(ctx, refreshToken)
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (*model.Response, error) {
	return r.logout(ctx)
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (*model.User, error) {
	return r.updateProfile(ctx, input)
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, input model.ChangePasswordInput) (*model.Response, error) {
	return r.changePassword(ctx, input)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	return r.createPost(ctx, input)
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, postID uuid.UUID, content string) (*model.Post, error) {
	return r.updatePost(ctx, postID, content)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postID uuid.UUID) (*model.Response, error) {
	return r.deletePost(ctx, postID)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.CreateCommentInput) (*model.Comment, error) {
	return r.createComment(ctx, input)
}

// UpdateComment is the resolver for the updateComment field.
func (r *mutationResolver) UpdateComment(ctx context.Context, commentID uuid.UUID, content string) (*model.Comment, error) {
	return r.updateComment(ctx, commentID, content)
}

// DeleteComment is the resolver for the deleteComment field.
func (r *mutationResolver) DeleteComment(ctx context.Context, commentID uuid.UUID) (*model.Response, error) {
	return r.deleteComment(ctx, commentID)
}

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, postID uuid.UUID) (*model.Response, error) {
	return r.likePost(ctx, postID)
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, postID uuid.UUID) (*model.Response, error) {
	return r.unlikePost(ctx, postID)
}

// FollowUser is the resolver for the followUser field.
func (r *mutationResolver) FollowUser(ctx context.Context, userID uuid.UUID) (*model.Response, error) {
	return r.followUser(ctx, userID)
}

// UnfollowUser is the resolver for the unfollowUser field.
func (r *mutationResolver) UnfollowUser(ctx context.Context, userID uuid.UUID) (*model.Response, error) {
	return r.unfollowUser(ctx, userID)
}

// MarkNotificationRead is the resolver for the markNotificationRead field.
func (r *mutationResolver) MarkNotificationRead(ctx context.Context, notificationID uuid.UUID) (*model.Response, error) {
	return r.markNotificationRead(ctx, notificationID)
}

// MarkAllNotificationsRead is the resolver for the markAllNotificationsRead field.
func (r *mutationResolver) MarkAllNotificationsRead(ctx context.Context) (*model.Response, error) {
	return r.markAllNotificationsRead(ctx)
}

// HealthCheck is the resolver for the healthCheck field.
func (r *queryResolver) HealthCheck(ctx context.Context) (*model.HealthCheckResponse, error) {
	return r.healthCheck(ctx)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	return r.me(ctx)
}

// GetProfile is the resolver for the getProfile field.
func (r *queryResolver) GetProfile(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	return r.getProfile(ctx, userID)
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, postID uuid.UUID) (*model.Post, error) {
	return r.getPost(ctx, postID)
}

// GetUserPosts is the resolver for the getUserPosts field.
func (r *queryResolver) GetUserPosts(ctx context.Context, userID uuid.UUID, first *int32, after *string) (*model.PostConnection, error) {
	return r.getUserPosts(ctx, userID, first, after)
}

// GetFeed is the resolver for the getFeed field.
func (r *queryResolver) GetFeed(ctx context.Context, first *int32, after *string) (*model.PostConnection, error) {
	return r.getFeed(ctx, first, after)
}

// GetPostComments is the resolver for the getPostComments field.
func (r *queryResolver) GetPostComments(ctx context.Context, postID uuid.UUID, first *int32, after *string) (*model.CommentConnection, error) {
	return r.getPostComments(ctx, postID, first, after)
}

// GetPostLikes is the resolver for the getPostLikes field.
func (r *queryResolver) GetPostLikes(ctx context.Context, postID uuid.UUID) (*model.LikeInfo, error) {
	return r.getPostLikes(ctx, postID)
}

// GetFollowers is the resolver for the getFollowers field.
func (r *queryResolver) GetFollowers(ctx context.Context, userID uuid.UUID, first *int32, after *string) (*model.FollowConnection, error) {
	return r.getFollowers(ctx, userID, first, after)
}

// GetFollowing is the resolver for the getFollowing field.
func (r *queryResolver) GetFollowing(ctx context.Context, userID uuid.UUID, first *int32, after *string) (*model.FollowConnection, error) {
	return r.getFollowing(ctx, userID, first, after)
}

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context, first *int32, after *string) (*model.NotificationConnection, error) {
	return r.getNotifications(ctx, first, after)
}

// NotificationAdded is the resolver for the notificationAdded field.
func (r *subscriptionResolver) NotificationAdded(ctx context.Context) (<-chan *model.Notification, error) {
	return r.notificationAdded(ctx)
}

// PostAdded is the resolver for the postAdded field.
func (r *subscriptionResolver) PostAdded(ctx context.Context, userID uuid.UUID) (<-chan *model.Post, error) {
	return r.postAdded(ctx, userID)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID uuid.UUID) (<-chan *model.Comment, error) {
	return r.commentAdded(ctx, postID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
