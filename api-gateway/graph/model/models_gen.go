// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type AuthResponse struct {
	AccessToken  string  `json:"accessToken"`
	RefreshToken string  `json:"refreshToken"`
	User         *User   `json:"user"`
	ExpiresIn    int32   `json:"expiresIn"`
	Message      *string `json:"message,omitempty"`
}

type ChangePasswordInput struct {
	CurrentPassword string `json:"currentPassword"`
	NewPassword     string `json:"newPassword"`
}

type Comment struct {
	ID        uuid.UUID `json:"id"`
	PostID    uuid.UUID `json:"postId"`
	UserID    uuid.UUID `json:"userId"`
	User      *User     `json:"user"`
	Content   string    `json:"content"`
	CreatedAt string    `json:"createdAt"`
	UpdatedAt string    `json:"updatedAt"`
}

type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int32          `json:"totalCount"`
}

type CommentEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Comment `json:"node"`
}

type CreateCommentInput struct {
	PostID  uuid.UUID `json:"postId"`
	Content string    `json:"content"`
}

type CreatePostInput struct {
	Content string `json:"content"`
}

type FollowConnection struct {
	Edges      []*FollowEdge `json:"edges"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int32         `json:"totalCount"`
}

type FollowEdge struct {
	Cursor     string `json:"cursor"`
	Node       *User  `json:"node"`
	FollowedAt string `json:"followedAt"`
}

type HealthCheckResponse struct {
	Status    string           `json:"status"`
	Timestamp string           `json:"timestamp"`
	Services  []*ServiceStatus `json:"services"`
}

type LikeInfo struct {
	Count                int32   `json:"count"`
	IsLikedByCurrentUser *bool   `json:"isLikedByCurrentUser,omitempty"`
	RecentLikers         []*User `json:"recentLikers"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type Notification struct {
	ID        uuid.UUID        `json:"id"`
	UserID    uuid.UUID        `json:"userId"`
	Type      NotificationType `json:"type"`
	Message   string           `json:"message"`
	ActorID   *uuid.UUID       `json:"actorId,omitempty"`
	Actor     *User            `json:"actor,omitempty"`
	RelatedID *uuid.UUID       `json:"relatedId,omitempty"`
	IsRead    bool             `json:"isRead"`
	CreatedAt string           `json:"createdAt"`
}

type NotificationConnection struct {
	Edges       []*NotificationEdge `json:"edges"`
	PageInfo    *PageInfo           `json:"pageInfo"`
	TotalCount  int32               `json:"totalCount"`
	UnreadCount int32               `json:"unreadCount"`
}

type NotificationEdge struct {
	Cursor string        `json:"cursor"`
	Node   *Notification `json:"node"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor,omitempty"`
	HasNextPage     bool    `json:"hasNextPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
}

type Post struct {
	ID            uuid.UUID          `json:"id"`
	UserID        uuid.UUID          `json:"userId"`
	User          *User              `json:"user"`
	Content       string             `json:"content"`
	CreatedAt     string             `json:"createdAt"`
	UpdatedAt     string             `json:"updatedAt"`
	LikesCount    int32              `json:"likesCount"`
	CommentsCount int32              `json:"commentsCount"`
	IsLiked       *bool              `json:"isLiked,omitempty"`
	Comments      *CommentConnection `json:"comments"`
}

type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   *PageInfo   `json:"pageInfo"`
	TotalCount int32       `json:"totalCount"`
}

type PostEdge struct {
	Cursor string `json:"cursor"`
	Node   *Post  `json:"node"`
}

type Query struct {
}

type RegisterInput struct {
	Username string  `json:"username"`
	Email    string  `json:"email"`
	Password string  `json:"password"`
	Bio      *string `json:"bio,omitempty"`
}

type Response struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type ServiceStatus struct {
	Name    string `json:"name"`
	Status  string `json:"status"`
	Latency *int32 `json:"latency,omitempty"`
}

type Subscription struct {
}

type UpdateProfileInput struct {
	Username *string `json:"username,omitempty"`
	Email    *string `json:"email,omitempty"`
	Bio      *string `json:"bio,omitempty"`
}

type User struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	Email          string    `json:"email"`
	Bio            *string   `json:"bio,omitempty"`
	CreatedAt      string    `json:"createdAt"`
	UpdatedAt      string    `json:"updatedAt"`
	FollowersCount int32     `json:"followersCount"`
	FollowingCount int32     `json:"followingCount"`
	PostsCount     int32     `json:"postsCount"`
	IsFollowing    *bool     `json:"isFollowing,omitempty"`
}

type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type NotificationType string

const (
	NotificationTypeLike    NotificationType = "LIKE"
	NotificationTypeComment NotificationType = "COMMENT"
	NotificationTypeFollow  NotificationType = "FOLLOW"
)

var AllNotificationType = []NotificationType{
	NotificationTypeLike,
	NotificationTypeComment,
	NotificationTypeFollow,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeLike, NotificationTypeComment, NotificationTypeFollow:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleUser  Role = "USER"
	RoleAdmin Role = "ADMIN"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
